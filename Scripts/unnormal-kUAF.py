#!/usr/bin/env python

import json
import os

def get_all_datafile():
    json_list = []
    for dirname,folder,files in os.walk("."):
        for filename in files:
            if filename.endswith(".json"):
                json_list.append(filename)
    return json_list

def load(json_file):
    print(json_file)
    unnormal_uaf_list = []
    with open(json_file) as json_data:  
        data = json.load(json_data)
    #for key in data.keys():
    #    print(key)
    for items in data["CVE_Items"]:
        cve_info = items["cve"]
        #print(cve_info["CVE_data_meta"]["ID"])
        cve_id = cve_info["CVE_data_meta"]["ID"]

        uaf_flag = False
	unnormal_uaf = False
        # check whether it is UAF 
        for cwe in cve_info["problemtype"]["problemtype_data"]:
            for dp in cwe["description"]:
		#print(cve_id,":",dp["value"])
		cwe_value = dp["value"]
		if dp["value"].find("CWE-416")!=-1 or dp["value"].find("CWE-415")!=-1 :
                    uaf_flag = True
		    #print(cve_id,dp["value"])
		    break
	if uaf_flag:
	    continue
	else:
	    for description_data in cve_info["description"]["description_data"]:
	    	if description_data["value"].find("CWE-416")!=-1 or description_data["value"].find("CWE-415")!=-1: 
		    unnormal_uaf = False
		    break
		if description_data["value"].find("se-after-free")!=-1 or description_data["value"].find("ouble-free")!=-1:
		    unnormal_uaf = True
		    cve_description = description_data["value"]
		    #print (cve_id,description_data["value"])
        if not unnormal_uaf:
            continue

        kernel_flag = False
        # check whether it is Linux Kernel Vulnerability
        for vendor in cve_info["affects"]["vendor"]["vendor_data"]:
            if vendor["vendor_name"] != "linux":
                continue
            for product in vendor["product"]["product_data"]:
                #print(product["product_name"])
                if product["product_name"] == "linux_kernel":
                    kernel_flag = True
        if not kernel_flag:
            continue

        unnormal_uaf_list.append(cve_id+"&&&"+cwe_value+"&&&"+cve_description)

    print len(unnormal_uaf_list)
    print unnormal_uaf_list
    return unnormal_uaf_list

if __name__ == "__main__":
    json_files = get_all_datafile()
    res = open("unnormal_uaf.txt","a")
    #json_files = ["nvdcve-1.0-2015.json"]
    #print(json_files)
    print("hello")
    for json_file in json_files:
        res_list = load(json_file)
	for cve in res_list:
	    res.write(cve)
	    res.write("\n")
	#res.write("\n")
    res.close()
