#!/usr/bin/env python

import json
import os
import csv
import re

year_range = [2006, 2019]

def get_all_datafile():
    json_list = []
    for dirname,folder,files in os.walk("."):
        for filename in files:
            if filename.endswith(".json"):
                year = int(filename.split("-")[2][0:4])
                if year >= year_range[0] and year <= year_range[1]:
                    json_list.append(filename)
    return json_list

def get_all_references(references):
    urls = []
    for data in references["reference_data"]:
        urls.append(data["url"])
    return urls

def get_commit_ids(urls):
    commit_ids = []
    for url in urls:
        if "https://github.com/torvalds/linux/commit/" in url:
            results = url.split("/")
            if not results[-1] in commit_ids:
                commit_ids.append(results[-1])
        if "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/" in url:
            results = url.split("=")
            if not results[-1] in commit_ids:
                commit_ids.append(results[-1])
    return commit_ids

def load(json_file):
    #print(json_file)
    bug_list = []
    zero_list = []
    one_list = []
    with open(json_file) as json_data:  
        data = json.load(json_data)
    #for key in data.keys():
    #    print(key)
    for items in data["CVE_Items"]:
        cve_info = items["cve"]
        #print(cve_info["CVE_data_meta"]["ID"])
        cve_id = cve_info["CVE_data_meta"]["ID"]
        descript = cve_info["description"]["description_data"][0]["value"]

        kernel_flag = False
        # check whether it is Linux Kernel Vulnerability
        for vendor in cve_info["affects"]["vendor"]["vendor_data"]:
            if vendor["vendor_name"] != "linux":
                continue
            for product in vendor["product"]["product_data"]:
                #print(product["product_name"])
                if product["product_name"] == "linux_kernel":
                    kernel_flag = True
        if not kernel_flag:
            continue
        
        refs = get_all_references(cve_info["references"])
        commit_ids = get_commit_ids(refs)
        
        if len(commit_ids) == 0:
            print(cve_id, "Zero useful repo url")
            zero_list.append(cve_id)
        elif len(commit_ids) == 1:
            print(cve_id, commit_ids[0])
            one_list.append(cve_id)
        else:
            print(cve_id, " is an incomplex fix")
            bug_list.append([cve_id, descript])
        
    return bug_list, one_list, zero_list

def write_bug(file_name,bug_list):
    write = csv.writer(file_name)
    for bug in bug_list:
        write.writerow(bug)

if __name__ == "__main__":
    json_files = get_all_datafile()
    
    # json_files = ["nvdcve-1.0-2018.json"]
    # print(json_files)
    print("==kernel bugs==")
    total_num = [0, 0, 0]
    for json_file in sorted(json_files):
        res = open("kernel_bugs/"+json_file[11:15]+".csv","w")
        res_list, one_list, zero_list = load(json_file)
        total_num[0] += len(res_list)
        total_num[1] += len(one_list)
        total_num[2] += len(zero_list)
        # print res_list
        write_bug(res,res_list)
        res.close()
    print(total_num)
