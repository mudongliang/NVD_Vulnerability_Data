#!/usr/bin/env python

import json
import os
import csv
import re

def get_all_datafile():
    json_list = []
    for dirname,folder,files in os.walk("."):
        for filename in files:
            if filename.endswith(".json"):
                json_list.append(filename)
    return json_list

def load(json_file):
    print(json_file)
    bug_list = []
    with open(json_file) as json_data:  
        data = json.load(json_data)
    #for key in data.keys():
    #    print(key)
    for items in data["CVE_Items"]:
        cve_info = items["cve"]
        #print(cve_info["CVE_data_meta"]["ID"])
        cve_id = cve_info["CVE_data_meta"]["ID"]

        kernel_flag = False
        # check whether it is Linux Kernel Vulnerability
        for vendor in cve_info["affects"]["vendor"]["vendor_data"]:
            if vendor["vendor_name"] != "linux":
                continue
            for product in vendor["product"]["product_data"]:
                #print(product["product_name"])
                if product["product_name"] == "linux_kernel":
                    kernel_flag = True
        if not kernel_flag:
            continue

        # record the CWE number
        ### if in cve_info["problemtype"]["problemtype_data"]
        cwe_list = []
        cwe_found_flag = False
        for cwe in cve_info["problemtype"]["problemtype_data"]:
            for dp in cwe["description"]:
                #print(cve_id,":",dp["value"])
                if dp["value"] != "NVD-CWE-Other" and dp["value"].find("CWE")!=-1 :
                    cwe_list.append(dp["value"])
                    #print(cve_id,dp["value"])
                    cwe_found_flag = True
        if not cwe_found_flag:
            cwe_description = ""
            ### to find CWE id in description 
            pattern = re.compile(r'(?:CWE-)\d+')
            for description_data in cve_info["description"]["description_data"]:
                des_CWEs = pattern.findall(description_data["value"])
                if des_CWEs:
                    cwe_found_flag = True
                    for des_cwe in des_CWEs:
                        cwe_list.append(des_cwe)
                        # print (cve_id,des_cwe)
                else:
                    cwe_description += description_data["value"] + "$"
        if not cwe_found_flag:
            cwe_list.append(cwe_description)

        bug_list.append([cve_id,cwe_list])

    print json_file[11:15],len(bug_list)
    return bug_list

def write_bug(file_name,bug_list):
    for bug in bug_list:
        cve_id = bug[0]
        cve_row = []
        cve_row.append(cve_id)
        for cwe in bug[1]:
            cve_row.append(cwe)
        csv.writer(file_name).writerow(cve_row)
    return 0

if __name__ == "__main__":
    json_files = get_all_datafile()
    
    # json_files = ["nvdcve-1.0-2018.json"]
    # print(json_files)
    print("==kernel bugs==")
    for json_file in json_files:
        res = open("kernel_bugs/"+json_file[11:15]+".csv","w")
        res_list = load(json_file)
        # print res_list
        write_bug(res,res_list)
        res.close()
