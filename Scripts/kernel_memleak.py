#!/usr/bin/env python

from __future__ import print_function

import json
import os
import csv
import re

def get_all_datafile():
    json_list = []
    for dirname,folder,files in os.walk("."):
        for filename in files:
            if filename.endswith(".json"):
                json_list.append(filename)
    return json_list

def check_keywords(desc, keywords):
    result = False
    for keyword in keywords:
        if re.search(keyword, desc):
            result = True
            break

    return result

def check_memleak(json_file):
    bug_list = []
    with open(json_file) as json_data:  
        data = json.load(json_data)
    kernel_sum = 0
    leak_sum = 0
    for items in data["CVE_Items"]:
        cve_info = items["cve"]
        #print(cve_info["CVE_data_meta"]["ID"])
        cve_id = cve_info["CVE_data_meta"]["ID"]

        kernel_flag = False
        # check whether it is Linux Kernel Vulnerability
        for vendor in cve_info["affects"]["vendor"]["vendor_data"]:
            if vendor["vendor_name"] != "linux":
                continue
            for product in vendor["product"]["product_data"]:
                #print(product["product_name"])
                if product["product_name"] == "linux_kernel":
                    kernel_flag = True
        if not kernel_flag:
            continue

        kernel_sum += 1
        #print([cve_id, cve_info["description"]["description_data"]])

        memleak_flag = False
        keywords = ["consumption", "exhaustion", "memory leak"]
        for description_data in cve_info["description"]["description_data"]:
            match_des = check_keywords(description_data["value"], keywords)
            #re.search
            if match_des and (not memleak_flag):
                memleak_flag = True
                break
        if not memleak_flag:
            continue

        leak_sum += 1

        bug_list.append([cve_id, cve_info["description"]["description_data"]])

    #print(bug_list)
    return leak_sum, kernel_sum

if __name__ == "__main__":
    json_files = get_all_datafile()
    
    #json_files = ["nvdcve-1.0-2016.json"]
    # print(json_files)
    total_leaknum = 0
    total_kernelnum = 0
    json_files = sorted(json_files)
    print("Year : # memory leak, # kernel vulnerability, # ratio")
    for json_file in json_files:
        print("%s : " % json_file[11:15], end='')
        leak_sum, kernel_sum = check_memleak(json_file)
        print("%d, %d, %f" % (leak_sum, kernel_sum, (float(leak_sum))/kernel_sum))
        total_leaknum += leak_sum
        total_kernelnum += kernel_sum

    print()
    print("------------ In Summary --------------")
    print(total_leaknum, total_kernelnum, float(total_leaknum)/total_kernelnum)
